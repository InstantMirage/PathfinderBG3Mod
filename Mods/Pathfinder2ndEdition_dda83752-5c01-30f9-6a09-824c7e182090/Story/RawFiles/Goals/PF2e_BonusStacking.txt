Version 1
SubGoalCombiner SGC_AND
INITSECTION
//Circumstance bonuses
DB_StackingBonus("CIRC_BON_ATTACK",1.0,"CircumstanceBonus1Attack",(TAG)CIRC_BON_1ATTACK_3a8d7b50-5f29-44bf-a8f4-a5e910fb4370);
DB_StackingBonus("CIRC_BON_ATTACK",2.0,"CircumstanceBonus2Attack",(TAG)CIRC_BON_2ATTACK_35b3e93e-09ab-4ec1-8a03-e8d2d37000e2);

DB_StackingBonus("CIRC_BON_AC",1.0,"CircumstanceBonus1AC",(TAG)CIRC_BON_1AC_e3aa596e-475a-491d-854f-09736a0b1b79);
DB_StackingBonus("CIRC_BON_AC",2.0,"CircumstanceBonus2AC",(TAG)CIRC_BON_2AC_83fb8414-92de-4711-9606-e3cb45d00de7);

DB_StackingBonus("CIRC_BON_SAVES",2.0,"CircumstanceBonus2Saves",(TAG)CIRC_BON_2SAVES_b1b8c471-26c1-470e-b52a-460a84661b08);

DB_StackingBonus("CIRC_BON_FORT",2.0,"CircumstanceBonus1FortSaves",(TAG)CIRC_BON_1FORT_c6b2e9d4-8970-41e8-9836-9144ee37a602);
DB_StackingBonus("CIRC_BON_REFLEX",2.0,"CircumstanceBonusReflexSaves2",(TAG)CIRC_BON_2REFLEX_f425f98d-f69c-4d49-8d23-b81cb1644dd0);

//Circumstance penalties
DB_StackingBonus("CIRC_PEN_ATTACK",1.0,"CircumstancePenalty1Attack",(TAG)CIRC_PEN_1ATTACK_01978f5e-6f76-4070-a15a-8a425664eb3c);
DB_StackingBonus("CIRC_PEN_ATTACK",2.0,"CircumstancePenalty2Attack",(TAG)CIRC_PEN_2ATTACK_be2e1f72-546b-4ee5-bd2c-2140dfc3daca);

DB_StackingBonus("CIRC_PEN_AC",1.0,"CircumstancePenalty1AC",(TAG)CIRC_PEN_1AC_873746ec-3a05-4943-892d-af24f41853b7);
DB_StackingBonus("CIRC_PEN_AC",2.0,"CircumstancePenalty2AC",(TAG)CIRC_PEN_2AC_6fc9a2c2-5ca5-4527-85d0-f43bc3af68ac);

//Status bonuses
DB_StackingBonus("STAT_BON_ATTACK",1.0,"StatusBonus1Attack",(TAG)STAT_BON_1ATTACK_7c81a4ca-c745-4f8f-80d7-27afffc96743);
DB_StackingBonus("STAT_BON_ATTACK",2.0,"StatusBonus2Attack",(TAG)STAT_BON_2ATTACK_5731ec87-1258-4c2d-997d-84facfb0d3ab);

DB_StackingBonus("STAT_BON_SPELLATTACK",1.0,"StatusBonus1SpellAttack",(TAG)STAT_BON_1SPELLATTACK_fbb88508-374d-40cc-bb8e-f867b15d1855);

DB_StackingBonus("STAT_BON_DAMAGE",1.0,"StatusBonusDamage1",(TAG)STAT_BON_1DAMAGE_724449c7-edc9-4718-90db-10b64894854b);
DB_StackingBonus("STAT_BON_DAMAGE",2.0,"StatusBonusDamage2",(TAG)STAT_BON_2DAMAGE_c0bdf90d-2f7b-4f08-b32c-65285e8d2def);
DB_StackingBonus("STAT_BON_DAMAGE",3.0,"StatusBonusDamage3",(TAG)STAT_BON_3DAMAGE_e31433fa-3e2a-49e0-83e3-69a26ded8564);

DB_StackingBonus("STAT_BON_AC",1.0,"StatusBonus1AC",(TAG)STAT_BON_1AC_2d966cb7-b830-4d09-8d28-9468008eec30);
DB_StackingBonus("STAT_BON_AC",2.0,"StatusBonus2AC",STAT_BON_2AC_43fe05b9-0d93-474b-8d1b-5faa06787f03);

DB_StackingBonus("STAT_BON_SAVES",1.0,"StatusBonus1Saves",(TAG)STAT_BON_1SAVES_1430e9a0-b6a6-4aaf-85cc-3427204846c4);
DB_StackingBonus("STAT_BON_SAVES",2.0,"StatusBonus2Saves",(TAG)STAT_BON_2SAVES_28b8b938-40ab-4865-8b43-36585d9aacbd);
DB_StackingBonus("STAT_BON_WILL",2.0,"StatusBonus2WillSaves",(TAG)STAT_BON_2WILL_62796e8a-b8b9-4995-b6d3-5b58a8458a2a);

DB_StackingBonus("STAT_BON_SKILLS",1.0,"StatusBonus1Skills",(TAG)STAT_BON_1SKILLS_9406c1c2-c713-4b6b-ba77-4a61b64afa92);

//Status penalties
DB_StackingBonus("STAT_PEN_ATTACK",1.0,"StatusPenalty1Attack",(TAG)STAT_PEN_1ATTACK_3a8e9193-177c-4f7a-bd24-5fe4253d4a00);
DB_StackingBonus("STAT_PEN_ATTACK",2.0,"StatusPenalty2Attack",(TAG)STAT_PEN_2ATTACK_b327c748-6773-4f0f-b687-3f0a72e42ef0);

DB_StackingBonus("STAT_PEN_DAMAGE",1.0,"StatusPenaltyDamage1",(TAG)STAT_PEN_1DAMAGE_c15b38c7-feb4-4206-8ac8-15e33fee28e8);

DB_StackingBonus("STAT_PEN_AC",1.0,"StatusPenalty1AC",(TAG)STAT_PEN_1AC_07fcccd0-40c5-4a84-bfe7-9c2ca5343b6c);
DB_StackingBonus("STAT_PEN_AC",2.0,"StatusPenalty2AC",(TAG)STAT_PEN_2AC_af04521c-a6fa-4d6e-a318-986b00a55e0a);

DB_StackingBonus("STAT_PEN_SAVES",1.0,"StatusPenalty1Saves",(TAG)STAT_PEN_1SAVES_79578e98-fbe4-4572-baa5-ff7f56682c54);
DB_StackingBonus("STAT_PEN_SAVES",2.0,"StatusPenalty2Saves",(TAG)STAT_PEN_2SAVES_4e3d3ba4-903d-4321-9bde-5725ef87df31);

DB_StackingBonus("STAT_PEN_DC",1.0,"StatusPenalty1SpellDC",(TAG)STAT_PEN_1DC_5d3fc2dd-44ed-4779-8458-40ea4b4a8e7d);
DB_StackingBonus("STAT_PEN_DC",2.0,"StatusPenalty2SpellDC",(TAG)STAT_PEN_2DC_6a54f471-1451-4822-91b2-696db159a2e7);

DB_StackingBonus("STAT_PEN_REFLEX",1.0,"StatusPenalty1DexteritySave",(TAG)STAT_PEN_1REFLEX_af343f46-eb25-45c9-9367-831c01794c76);
DB_StackingBonus("STAT_PEN_REFLEX",2.0,"StatusPenalty2DexteritySave",(TAG)STAT_PEN_2REFLEX_e01deb59-3dc4-48cc-93df-68925b6bf7fa);

DB_StackingBonus("STAT_PEN_WILL",1.0,"StatusPenalty1WillSaves",(TAG)STAT_PEN_1WILL_c6afd5bf-6d65-46d5-990b-900563dfbe84);
DB_StackingBonus("STAT_PEN_WILL",2.0,"StatusPenalty2WillSaves",(TAG)STAT_PEN_2WILL_7c828408-27fe-4d42-92da-bbb00c0cb04d);

//Resistance
DB_ExpectedResistance("",(CHARACTER)NULL_00000000-0000-0000-0000-000000000000,1);
DB_ExpectedWeakness("",(CHARACTER)NULL_00000000-0000-0000-0000-000000000000,1);

DB_ResistStacks("All","ALL_RESIST_INPUT");
DB_ResistStacks("Bludgeoning","BLD_RESIST_INPUT");
DB_ResistStacks("Slashing","SLA_RESIST_INPUT");
DB_ResistStacks("Piercing","PRC_RESIST_INPUT");
DB_ResistStacks("Acid","ACI_RESIST_INPUT");
DB_ResistStacks("Cold","CLD_RESIST_INPUT");
DB_ResistStacks("Fire","FIR_RESIST_INPUT");
DB_ResistStacks("Force","FOR_RESIST_INPUT");
DB_ResistStacks("Lightning","LGT_RESIST_INPUT");
DB_ResistStacks("Necrotic","NEC_RESIST_INPUT");
DB_ResistStacks("Poison","POI_RESIST_INPUT");
DB_ResistStacks("Psychic","PSY_RESIST_INPUT");
DB_ResistStacks("Radiant","RAD_RESIST_INPUT");
DB_ResistStacks("Thunder","THN_RESIST_INPUT");

DB_VulnStacks("All","ALL_WEAK_INPUT");
DB_VulnStacks("Bludgeoning","BLD_WEAK_INPUT");
DB_VulnStacks("Slashing","SLA_WEAK_INPUT");
DB_VulnStacks("Piercing","PRC_WEAK_INPUT");
DB_VulnStacks("Acid","ACI_WEAK_INPUT");
DB_VulnStacks("Cold","CLD_WEAK_INPUT");
DB_VulnStacks("Fire","FIR_WEAK_INPUT");
DB_VulnStacks("Force","FOR_WEAK_INPUT");
DB_VulnStacks("Lightning","LGT_WEAK_INPUT");
DB_VulnStacks("Necrotic","NEC_WEAK_INPUT");
DB_VulnStacks("Poison","POI_WEAK_INPUT");
DB_VulnStacks("Psychic","PSY_WEAK_INPUT");
DB_VulnStacks("Radiant","RAD_WEAK_INPUT");
DB_VulnStacks("Thunder","THN_WEAK_INPUT");

DB_ResistValue("Acid","ResistEnergyStatus_Acid_Rank2",5);
DB_ResistValue("Cold","ResistEnergyStatus_Cold_Rank2",5);
DB_ResistValue("Fire","ResistEnergyStatus_Fire_Rank2",5);
DB_ResistValue("Lightning","ResistEnergyStatus_Lightning_Rank2",5);
DB_ResistValue("Thunder","ResistEnergyStatus_Thunder_Rank2",5);
DB_ResistValue("Acid","ResistEnergyStatus_Acid_Rank4",10);
DB_ResistValue("Cold","ResistEnergyStatus_Cold_Rank4",10);
DB_ResistValue("Fire","ResistEnergyStatus_Fire_Rank4",10);
DB_ResistValue("Lightning","ResistEnergyStatus_Lightning_Rank4",10);
DB_ResistValue("Thunder","ResistEnergyStatus_Thunder_Rank4",10);
DB_ResistValue("Bludgeoning","STONESKIN",5);
DB_ResistValue("Slashing","STONESKIN",5);
DB_ResistValue("Piercing","STONESKIN",5);
DB_ResistValue("Bludgeoning","STONESKIN_6",10);
DB_ResistValue("Slashing","STONESKIN_6",10);
DB_ResistValue("Piercing","STONESKIN_6",10);
DB_ResistValue("Slashing","SANDFORM",5);
DB_ResistValue("Piercing","SANDFORM",5);
DB_ResistValue("Slashing","SANDFORM_5",10);
DB_ResistValue("Piercing","SANDFORM_5",10);

DB_ResistStacks("Bludgeoning","RAGING_RESIST_BLD");
DB_ResistStacks("Slashing","RAGING_RESIST_SLA");
DB_ResistStacks("Piercing","RAGING_RESIST_PRC");
DB_ResistStacks("Fire","RAGING_RESIST_FIR");
DB_ResistStacks("Necrotic","RAGING_RESIST_NEC");

DB_ResistStacks("All","PROTECTOR_SPHERE_DR");
DB_ResistStacks("All","IronbloodStanceDR");
DB_ResistStacks("Bludgeoning","RallyingAnthemDR");
DB_ResistStacks("Slashing","RallyingAnthemDR");
DB_ResistStacks("Piercing","RallyingAnthemDR");
DB_VulnStacks("Acid","BETRAYAL_ACID_STACK");
DB_VulnStacks("Cold","BETRAYAL_COLD_STACK");
DB_VulnStacks("Fire","BETRAYAL_FIRE_STACK");
DB_VulnStacks("Lightning","BETRAYAL_LIGHTNING_STACK");
DB_VulnStacks("Thunder","BETRAYAL_THUNDER_STACK");

DB_ResistanceStatus("All","ALL_RESIST_OUTPUT","ALL_WEAK_OUTPUT");
DB_ResistanceStatus("Bludgeoning","BLD_RESIST_OUTPUT","BLD_WEAK_OUTPUT");
DB_ResistanceStatus("Slashing","SLA_RESIST_OUTPUT","SLA_WEAK_OUTPUT");
DB_ResistanceStatus("Piercing","PRC_RESIST_OUTPUT","PRC_WEAK_OUTPUT");
DB_ResistanceStatus("Acid","ACI_RESIST_OUTPUT","ACI_WEAK_OUTPUT");
DB_ResistanceStatus("Cold","CLD_RESIST_OUTPUT","CLD_WEAK_OUTPUT");
DB_ResistanceStatus("Fire","FIR_RESIST_OUTPUT","FIR_WEAK_OUTPUT");
DB_ResistanceStatus("Force","FOR_RESIST_OUTPUT","FOR_WEAK_OUTPUT");
DB_ResistanceStatus("Lightning","LGT_RESIST_OUTPUT","LGT_WEAK_OUTPUT");
DB_ResistanceStatus("Necrotic","NEC_RESIST_OUTPUT","NEC_WEAK_OUTPUT");
DB_ResistanceStatus("Poison","POI_RESIST_OUTPUT","POI_WEAK_OUTPUT");
DB_ResistanceStatus("Psychic","PSY_RESIST_OUTPUT","PSY_WEAK_OUTPUT");
DB_ResistanceStatus("Radiant","RAD_RESIST_OUTPUT","RAD_WEAK_OUTPUT");
DB_ResistanceStatus("Thunder","THN_RESIST_OUTPUT","THN_WEAK_OUTPUT");

DB_AncestryResistance("Poison","Dwarf_DwarvenResilience");
DB_AncestryResistance("Fire","Tiefling_HellishResistance");
DB_AncestryResistance("Acid","Dragonborn_Resistance_Acid");
DB_AncestryResistance("Cold","Dragonborn_Resistance_Cold");
DB_AncestryResistance("Fire","Dragonborn_Resistance_Fire");
DB_AncestryResistance("Lightning","Dragonborn_Resistance_Lightning");
DB_AncestryResistance("Poison","Dragonborn_Resistance_Poison");
DB_AncestryResistance("Fire","FireResistance"); //Druid feats
DB_AncestryResistance("Poison","PoisonResistance");

DB_IntrinsicResistance("Bludgeoning","BldResist_3",3);
DB_IntrinsicResistance("Bludgeoning","BldResist_5",5);
DB_IntrinsicResistance("Bludgeoning","BldResist_10",10);
DB_IntrinsicResistance("Slashing","SlaResist_3",3);
DB_IntrinsicResistance("Slashing","SlaResist_5",5);
DB_IntrinsicResistance("Slashing","SlaResist_10",10);
DB_IntrinsicResistance("Piercing","PrcResist_3",3);
DB_IntrinsicResistance("Piercing","PrcResist_5",5);
DB_IntrinsicResistance("Piercing","PrcResist_10",10);
DB_IntrinsicResistance("Acid","AciResist_3",3);
DB_IntrinsicResistance("Acid","AciResist_5",5);
DB_IntrinsicResistance("Acid","AciResist_10",10);
DB_IntrinsicResistance("Cold","CldResist_3",3);
DB_IntrinsicResistance("Cold","CldResist_5",5);
DB_IntrinsicResistance("Cold","CldResist_10",10);
DB_IntrinsicResistance("Fire","FirResist_3",3);
DB_IntrinsicResistance("Fire","FirResist_5",5);
DB_IntrinsicResistance("Fire","FirResist_10",10);
DB_IntrinsicResistance("Force","ForResist_3",3);
DB_IntrinsicResistance("Force","ForResist_5",5);
DB_IntrinsicResistance("Force","ForResist_10",10);
DB_IntrinsicResistance("Lightning","LgtResist_3",3);
DB_IntrinsicResistance("Lightning","LgtResist_5",5);
DB_IntrinsicResistance("Lightning","LgtResist_10",10);
DB_IntrinsicResistance("Necrotic","NecResist_3",3);
DB_IntrinsicResistance("Necrotic","NecResist_5",5);
DB_IntrinsicResistance("Necrotic","NecResist_10",10);
DB_IntrinsicResistance("Poison","PoiResist_3",3);
DB_IntrinsicResistance("Poison","PoiResist_5",5);
DB_IntrinsicResistance("Poison","PoiResist_10",10);
DB_IntrinsicResistance("Psychic","PsyResist_3",3);
DB_IntrinsicResistance("Psychic","PsyResist_5",5);
DB_IntrinsicResistance("Psychic","PsyResist_10",10);
DB_IntrinsicResistance("Radiant","RadResist_3",3);
DB_IntrinsicResistance("Radiant","RadResist_5",5);
DB_IntrinsicResistance("Radiant","RadResist_10",10);
DB_IntrinsicResistance("Thunder","ThnResist_3",3);
DB_IntrinsicResistance("Thunder","ThnResist_5",5);
DB_IntrinsicResistance("Thunder","ThnResist_10",10);

DB_IntrinsicResistance("Bludgeoning","GhostResist_5",5);
DB_IntrinsicResistance("Bludgeoning","GhostResist_10",10);
DB_IntrinsicResistance("Slashing","GhostResist_5",5);
DB_IntrinsicResistance("Slashing","GhostResist_10",10);
DB_IntrinsicResistance("Piercing","GhostResist_5",5);
DB_IntrinsicResistance("Piercing","GhostResist_10",10);
DB_IntrinsicResistance("Acid","GhostResist_5",5);
DB_IntrinsicResistance("Acid","GhostResist_10",10);
DB_IntrinsicResistance("Cold","GhostResist_5",5);
DB_IntrinsicResistance("Cold","GhostResist_10",10);
DB_IntrinsicResistance("Fire","GhostResist_5",5);
DB_IntrinsicResistance("Fire","GhostResist_10",10);
DB_IntrinsicResistance("Lightning","GhostResist_5",5);
DB_IntrinsicResistance("Lightning","GhostResist_10",10);
DB_IntrinsicResistance("Necrotic","GhostResist_5",5);
DB_IntrinsicResistance("Necrotic","GhostResist_10",10);
DB_IntrinsicResistance("Poison","GhostResist_5",5);
DB_IntrinsicResistance("Poison","GhostResist_10",10);
DB_IntrinsicResistance("Psychic","GhostResist_5",5);
DB_IntrinsicResistance("Psychic","GhostResist_10",10);
DB_IntrinsicResistance("Thunder","GhostResist_5",5);
DB_IntrinsicResistance("Thunder","GhostResist_10",10);

//Vanilla weaknesses/resistances
DB_ResistValue("Bludgeoning","BLADE_WARD",5);
DB_ResistValue("Slashing","BLADE_WARD",5);
DB_ResistValue("Piercing","BLADE_WARD",5);
DB_ResistValue("Fire","CHILLED",5);
DB_WeakValue("Cold","CHILLED",5);
DB_ResistValue("Fire","WET",5);
DB_WeakValue("Cold","WET",5);
DB_WeakValue("Lightning","WET",5);
DB_ResistValue("All","POTION_OF_INVULNERABILITY",5);
DB_ResistValue("Acid","POTION_OF_RESISTANCE_ACID",5);
DB_ResistValue("Fire","POTION_OF_RESISTANCE_FIRE",5);
DB_ResistValue("Cold","POTION_OF_RESISTANCE_COLD",5);
DB_ResistValue("Force","POTION_OF_RESISTANCE_FORCE",5);
DB_ResistValue("Necrotic","POTION_OF_RESISTANCE_NECROTIC",5);
DB_ResistValue("Lightning","POTION_OF_RESISTANCE_LIGHTNING",5);
DB_ResistValue("Poison","POTION_OF_RESISTANCE_POISON",5);
DB_ResistValue("Psychic","POTION_OF_RESISTANCE_PSYCHIC",5);
DB_ResistValue("Radiant","POTION_OF_RESISTANCE_RADIANT",5);
DB_ResistValue("Thunder","POTION_OF_RESISTANCE_THUNDER",5);
DB_ResistValue("Acid","RESISTANCE_ACID",5);
DB_ResistValue("Fire","RESISTANCE_FIRE",5);
DB_ResistValue("Cold","RESISTANCE_COLD",5);
DB_ResistValue("Force","RESISTANCE_FORCE",5);
DB_ResistValue("Necrotic","RESISTANCE_NECROTIC",5);
DB_ResistValue("Lightning","RESISTANCE_LIGHTNING",5);
DB_ResistValue("Poison","RESISTANCE_POISON",5);
DB_ResistValue("Poison","NATURES_STEP_RESISTANCE_DRYAD",5);
DB_ResistValue("Psychic","RESISTANCE_PSYCHIC",5);
DB_ResistValue("Radiant","RESISTANCE_RADIANT",5);
DB_ResistValue("Thunder","RESISTANCE_THUNDER",5);
DB_WeakValue("Bludgeoning","BRITTLE",5);
DB_WeakValue("Thunder","BRITTLE",5);
DB_ResistValue("Fire","CRYSTALSKIN",5);
DB_ResistValue("Cold","CRYSTALSKIN",5);
DB_ResistValue("Lightning","CRYSTALSKIN",5);
DB_WeakValue("Piercing","DIGESTIVE_SAP",5);
DB_WeakValue("Bludgeoning","DIGESTIVE_SAP",5);
DB_ResistValue("Poison","WEB_BUFF_SPIDER_ACTIVE",10);
DB_WeakValue("All","TAD_PERILOUS_STAKES",5);
DB_WeakValue("All","MF_PERILOUS_STAKES",10);
DB_WeakValue("Piercing","AURA_OF_MURDER_BUFF",5);
//Gustav
DB_ResistValue("Bludgeoning","FOR_OGRE_ENRAGE_HARDCORE",5);
DB_ResistValue("Slashing","FOR_OGRE_ENRAGE_HARDCORE",5);
DB_ResistValue("Piercing","FOR_OGRE_ENRAGE_HARDCORE",5);
DB_ResistValue("Bludgeoning","FOR_OWLBEAR_ENRAGE_HARDCORE",5);
DB_ResistValue("Slashing","FOR_OWLBEAR_ENRAGE_HARDCORE",5);
DB_ResistValue("Piercing","FOR_OWLBEAR_ENRAGE_HARDCORE",5);
DB_ResistValue("Bludgeoning","FOR_SPIDERQUEEN_ENRAGE_HARDCORE",5);
DB_ResistValue("Slashing","FOR_SPIDERQUEEN_ENRAGE_HARDCORE",5);
DB_ResistValue("Piercing","FOR_SPIDERQUEEN_ENRAGE_HARDCORE",5);
DB_ResistValue("Poison","HAG_HEART_OF_STONE",5);
DB_ResistValue("Fire","MAG_FIRE_RESISTANCE",5);
DB_WeakValue("Acid","HAG_WELL_BAD",5);
DB_WeakValue("Psychic","HAG_WELL_BAD",5);
DB_WeakValue("All","HAG_WELL_WORSE",5);
DB_WeakValue("All","HAG_FLESHROT",5);
DB_WeakValue("Psychic","HAG_MASKOFREGRET",5);
//GustavDev
DB_ResistValue("Fire","TWN_DRENCHED",5);
DB_WeakValue("Cold","TWN_DRENCHED",5);
DB_WeakValue("Lightning","TWN_DRENCHED",5);
DB_WeakValue("Necrotic","SHA_SKELETON_WITHERING_MARK",5);
DB_ResistValue("Necrotic","HAV_SELUNEOINTMENT",5);
DB_ResistValue("Acid","TWN_DISTILLERY_RESISTANCE_ACID",5);
DB_ResistValue("Cold","TWN_DISTILLERY_RESISTANCE_COLD",5);
DB_ResistValue("Fire","TWN_DISTILLERY_RESISTANCE_FIRE",5);
DB_ResistValue("Lightning","TWN_DISTILLERY_RESISTANCE_LIGHTNING",5);
DB_ResistValue("Poison","TWN_DISTILLERY_RESISTANCE_POISON",5);
DB_ResistValue("Necrotic","SHA_ALTAR_BUFF",5);
DB_ResistValue("Necrotic","COL_MYRKULITE_BLESSING",5);
DB_ResistValue("Cold","COL_MYRKULITE_BLESSING",5);
DB_WeakValue("Psychic","CRE_MINDSTEAL_LINK_TARGET",5);
DB_ResistValue("Bludgeoning","CRE_HATCHERY_GAS_POSITIVE",5);
DB_ResistValue("Slashing","CRE_HATCHERY_GAS_POSITIVE",5);
DB_ResistValue("Piercing","CRE_HATCHERY_GAS_POSITIVE",5);
DB_WeakValue("Bludgeoning","CRE_HATCHERY_GAS_NEGATIVE",5);
DB_WeakValue("Slashing","CRE_HATCHERY_GAS_NEGATIVE",5);
DB_WeakValue("Piercing","CRE_HATCHERY_GAS_NEGATIVE",5);
DB_WeakValue("Psychic","COL_RESONANCESTONE_BUFF",5);
DB_WeakValue("Fire","LOW_HOUSEOFHOPE_FIRE",5);
DB_WeakValue("Fire","LOW_HOUSEOFHOPE_FIRE",5);
DB_ResistValue("Psychic","INT_ORPHEUS_PROTECTION",5);
DB_ResistValue("Psychic","END_ORPHEUS_PROTECTION",5);
DB_ResistValue("Acid","MAG_LEGENDARY_CHROMATIC_ATTUNEMENT_ACID",5);
DB_ResistValue("Fire","MAG_LEGENDARY_CHROMATIC_ATTUNEMENT_FIRE",10);
DB_ResistValue("Cold","MAG_LEGENDARY_CHROMATIC_ATTUNEMENT_COLD",10);
DB_ResistValue("Lightning","MAG_LEGENDARY_CHROMATIC_ATTUNEMENT_LIGHTNING",10);
DB_ResistValue("Poison","MAG_LEGENDARY_CHROMATIC_ATTUNEMENT_POISON",10);
DB_ResistValue("Thunder","MAG_LEGENDARY_CHROMATIC_ATTUNEMENT_THUNDER",10);
DB_WeakValue("Psychic","WYR_POTENTDRINK_DETECT_THOUGHTS",5);
DB_WeakValue("Piercing","MAG_BHAALIST_AURA_OF_MURDER",5);
DB_ResistValue("Bludgeoning","MAG_MYRKULITES_UNDEAD_PRESENCE_BUFF",5);
DB_ResistValue("Slashing","MAG_MYRKULITES_UNDEAD_PRESENCE_BUFF",5);
DB_ResistValue("Piercing","MAG_MYRKULITES_UNDEAD_PRESENCE_BUFF",5);
DB_WeakValue("Bludgeoning","MAG_GISH_BLUDGEONING_VULNERABILITY",5);
DB_WeakValue("Slashing","MAG_GISH_SLASHING_VULNERABILITY",5);
DB_WeakValue("Piercing","MAG_GISH_PIERCING_VULNERABILITY",5);
DB_WeakValue("All","WYR_GORTASH_SHIELD_DEBUFF",5);
DB_ResistValue("Bludgeoning","POTION_OF_THE_GIANT",5);
DB_ResistValue("Slashing","POTION_OF_THE_GIANT",5);
DB_ResistValue("Piercing","POTION_OF_THE_GIANT",5);
DB_ResistValue("All","POTION_OF_BRAVERY",5);
DB_ResistValue("Fire","WATER_LAYER_PROTECTION",5);
DB_ResistValue("All","WYR_ALIORAMUS_MATINGPHEROMONES",10);
DB_WeakValue("Poison","MAG_POISON_POISON_LETHALITY",5);
DB_ResistValue("Acid","MOO_BLOODPOTION_DRAGONBORN_ACID",5);
DB_ResistValue("Fire","MOO_BLOODPOTION_DRAGONBORN_FIRE",10);
DB_ResistValue("Cold","MOO_BLOODPOTION_DRAGONBORN_ICE",10);
DB_ResistValue("Lightning","MOO_BLOODPOTION_DRAGONBORN_LIGHTNING",10);
DB_ResistValue("Poison","MOO_BLOODPOTION_DRAGONBORN_POISON",10);
DB_ResistValue("Lightning","MAG_CONSTRUCT_MODE",5);
DB_ResistValue("Bludgeoning","MAG_BLADE_WARD",5);
DB_ResistValue("Slashing","MAG_BLADE_WARD",5);
DB_ResistValue("Piercing","MAG_BLADE_WARD",5);
DB_ResistValue("Bludgeoning","MAG_MONK_MOUNTAIN_BLADE_WARD",5);
DB_ResistValue("Slashing","MAG_MONK_MOUNTAIN_BLADE_WARD",5);
DB_ResistValue("Piercing","MAG_MONK_MOUNTAIN_BLADE_WARD",5);
KBSECTION
//REGION Automatically set and clear statuses based on tags

IF
TagSet((CHARACTER)_Char,(TAG)_Tag)
AND
DB_StackingBonus((STRING)_Type,(REAL)_Value,(STRING)_Status,_Tag)
THEN
ApplyStatus(_Char, _Status, -1.0 );

IF
TagCleared((CHARACTER)_Char,(TAG)_Tag)
AND
DB_StackingBonus((STRING)_Type,(REAL)_Value,(STRING)_Status,_Tag)
THEN
RemoveStatus(_Char, _Status );

//END_REGION

//REGION Resistances

//REGION Input resistance
IF
StatusApplied((CHARACTER)_Char,(STRING)_InputR,_,_)
AND
DB_ResistStacks((STRING)_Type,_InputR)
THEN
PROC_CalculateResistances(_Type,_Char);

IF
StatusRemoved((CHARACTER)_Char,(STRING)_InputR,_,_)
AND
DB_ResistStacks((STRING)_Type,_InputR)
THEN
PROC_CalculateResistances(_Type,_Char);

IF
StatusApplied((CHARACTER)_Char,(STRING)_InputR,_,_)
AND
DB_ResistValue((STRING)_Type,_InputR,(INTEGER)_Value)
THEN
PROC_CalculateResistances(_Type,_Char);

IF
StatusRemoved((CHARACTER)_Char,(STRING)_InputR,_,_)
AND
DB_ResistValue((STRING)_Type,_InputR,(INTEGER)_Value)
THEN
PROC_CalculateResistances(_Type,_Char);

IF
StatusApplied((CHARACTER)_Char,(STRING)_InputW,_,_)
AND
DB_VulnStacks((STRING)_Type,_InputW)
THEN
PROC_CalculateResistances(_Type,_Char);

IF
StatusRemoved((CHARACTER)_Char,(STRING)_InputW,_,_)
AND
DB_VulnStacks((STRING)_Type,_InputW)
THEN
PROC_CalculateResistances(_Type,_Char);

IF
StatusApplied((CHARACTER)_Char,(STRING)_InputW,_,_)
AND
DB_WeakValue((STRING)_Type,_InputW,(INTEGER)_Value)
THEN
PROC_CalculateResistances(_Type,_Char);

IF
StatusRemoved((CHARACTER)_Char,(STRING)_InputW,_,_)
AND
DB_WeakValue((STRING)_Type,_InputW,(INTEGER)_Value)
THEN
PROC_CalculateResistances(_Type,_Char);


//END_REGION

//REGION Calculate
PROC
PROC_CalculateResistances((STRING)_Type,(CHARACTER)_Char)
THEN
NOT DB_ExpectedResistance(_Type,_Char);
DB_ExpectedResistance(_Type,_Char,0);

NOT DB_ExpectedWeakness(_Type,_Char);
DB_ExpectedWeakness(_Type,_Char,0);

PROC_ExpectedResistance_Input(_Type,_Char);
PROC_ExpectedResistance_InputStacks(_Type,_Char);
PROC_ExpectedResistance_All(_Type,_Char);
PROC_ExpectedResistance_Intrinsic(_Type,_Char);
PROC_ExpectedResistance_Ancestry(_Type,_Char);

PROC_SubtractResistance_All(_Type,_Char);
PROC_SubtractResistance_Intrinsic(_Type,_Char);
PROC_SubtractResistance_Ancestry(_Type,_Char);

PROC_ExpectedWeakness_Input(_Type,_Char);
PROC_ExpectedWeakness_InputStacks(_Type,_Char);

PROC_SubtractResistanceWeakness(_Type,_Char);
PROC_ApplyResistanceStatus(_Type,_Char);

NOT DB_ExpectedResistance(_Type,_Char);
NOT DB_ExpectedWeakness(_Type,_Char);
PROC_CalculateAdditionalResistances(_Type,_Char);

PROC
PROC_CalculateAdditionalResistances((STRING)_Type,(CHARACTER)_Char)
AND
_Type == "All"
THEN
PROC_CalculateResistances("Bludgeoning",_Char);
PROC_CalculateResistances("Slashing",_Char);
PROC_CalculateResistances("Piercing",_Char);
PROC_CalculateResistances("Acid",_Char);
PROC_CalculateResistances("Cold",_Char);
PROC_CalculateResistances("Fire",_Char);
PROC_CalculateResistances("Force",_Char);
PROC_CalculateResistances("Lightning",_Char);
PROC_CalculateResistances("Necrotic",_Char);
PROC_CalculateResistances("Poison",_Char);
PROC_CalculateResistances("Psychic",_Char);
PROC_CalculateResistances("Radiant",_Char);
PROC_CalculateResistances("Thunder",_Char);

//Apply status
PROC
PROC_ApplyResistanceStatus((STRING)_Type,(CHARACTER)_Char)
AND
DB_ExpectedResistance(_Type,_Char,(INTEGER)_ResistValue)
AND
_ResistValue > 0
AND
DB_ResistanceStatus(_Type,(STRING)_OutputR,(STRING)_OutputW)
AND
IntegerProduct(_ResistValue,6,(INTEGER)_Product)
AND
IntegerToReal(_Product,(REAL)_ResistReal)
AND
GetStatusCurrentLifetime(_Char,_OutputR,(REAL)_Duration)
AND
NOT _Duration == _ResistReal
THEN
ApplyStatus(_Char,_OutputR,_ResistReal);

PROC
PROC_ApplyResistanceStatus((STRING)_Type,(CHARACTER)_Char)
AND
DB_ExpectedResistance(_Type,_Char,(INTEGER)_ResistValue)
AND
_ResistValue < 0
AND
DB_ResistanceStatus(_Type,(STRING)_OutputR,(STRING)_OutputW)
AND
IntegerProduct(_ResistValue,-6,(INTEGER)_Product)
AND
IntegerToReal(_Product,(REAL)_ResistReal)
AND
GetStatusCurrentLifetime(_Char,_OutputW,(REAL)_Duration)
AND
NOT _Duration == _ResistReal
THEN
ApplyStatus(_Char,_OutputW,_ResistReal);

PROC
PROC_ApplyResistanceStatus((STRING)_Type,(CHARACTER)_Char)
AND
DB_ExpectedResistance(_Type,_Char,(INTEGER)_ResistValue)
AND
_ResistValue == 0
AND
DB_ResistanceStatus(_Type,(STRING)_OutputR,(STRING)_OutputW)
THEN
RemoveStatus(_Char,_OutputR);
RemoveStatus(_Char,_OutputW);

//END_REGION

//REGION Expected resistance (math.max)

PROC
PROC_MaxExpectedResistance((STRING)_Type,(CHARACTER)_Char,(INTEGER)_InputValue)
AND
DB_ExpectedResistance(_Type,_Char,(INTEGER)_OldValue)
AND
IntegerMax(_OldValue,_InputValue,(INTEGER)_NewValue)
AND
IntegerToString(_NewValue,(STRING)_ResistString)
THEN
NOT DB_ExpectedResistance(_Type,_Char,_OldValue);
DB_ExpectedResistance(_Type,_Char,_NewValue);

PROC
PROC_MaxExpectedResistanceFromDuration((STRING)_Type,(CHARACTER)_Char,(STRING)_Status)
AND
GetStatusCurrentLifetime(_Char,_Status,(REAL)_Duration)
AND
_Duration > 0.0
AND
RealToInteger(_Duration,(INTEGER)_DurationInt)
AND
IntegerSum(_DurationInt,1,(INTEGER)_DurationPlusOne) //account for osi reaction time
AND
IntegerDivide(_DurationPlusOne,6,(INTEGER)_InputValue) //duration is in seconds (1 turn = 6s)
THEN
PROC_MaxExpectedResistance(_Type,_Char,_InputValue);

//Input status
PROC
PROC_ExpectedResistance_Input((STRING)_Type,(CHARACTER)_Char)
AND
DB_ResistValue(_Type,(STRING)_Status,(INTEGER)_InputValue)
AND
HasAppliedStatus(_Char,_Status,1)
THEN
PROC_MaxExpectedResistance(_Type,_Char,_InputValue);

PROC
PROC_ExpectedResistance_InputStacks((STRING)_Type,(CHARACTER)_Char)
AND
DB_ResistStacks((STRING)_Type,_InputR)
THEN
PROC_MaxExpectedResistanceFromDuration(_Type,_Char,_InputR);

//Check resistance to all too
PROC
PROC_ExpectedResistance_All((STRING)_Type,(CHARACTER)_Char)
AND
NOT _Type == "All"
THEN
PROC_MaxExpectedResistanceFromDuration(_Type,_Char,"ALL_RESIST_OUTPUT");

PROC
PROC_ExpectedResistance_Intrinsic((STRING)_Type,(CHARACTER)_Char)
AND
DB_IntrinsicResistance(_Type,(STRING)_Passive,(INTEGER)_InputValue)
AND
HasPassive(_Char,_Passive,1)
THEN
PROC_MaxExpectedResistance(_Type,_Char,_InputValue);

PROC
PROC_ExpectedResistance_Ancestry((STRING)_Type,(CHARACTER)_Char)
AND
DB_AncestryResistance(_Type,(STRING)_Passive)
AND
HasPassive(_Char,_Passive,1)
AND
GetLevel(_Char,(INTEGER)_Level)
AND
IntegerSum(_Level,1,(INTEGER)_LevelPlus1) //Integers are truncated
AND
IntegerDivide(_LevelPlus1,2,(INTEGER)_LevelHalf)
THEN
PROC_MaxExpectedResistance(_Type,_Char,_LevelHalf);

//END_REGION

//REGION Expected weakness (math.max)

PROC
PROC_MaxExpectedWeakness((STRING)_Type,(CHARACTER)_Char,(INTEGER)_InputValue)
AND
DB_ExpectedWeakness(_Type,_Char,(INTEGER)_OldValue)
AND
IntegerMax(_OldValue,_InputValue,(INTEGER)_NewValue)
AND
IntegerToString(_NewValue,(STRING)_ResistString)
THEN
NOT DB_ExpectedWeakness(_Type,_Char,_OldValue);
DB_ExpectedWeakness(_Type,_Char,_NewValue);

PROC
PROC_MaxExpectedWeaknessFromDuration((STRING)_Type,(CHARACTER)_Char,(STRING)_Status)
AND
GetStatusCurrentLifetime(_Char,_Status,(REAL)_Duration)
AND
_Duration > 0.0
AND
RealToInteger(_Duration,(INTEGER)_DurationInt)
AND
IntegerSum(_DurationInt,1,(INTEGER)_DurationPlusOne) //account for osi reaction time
AND
IntegerDivide(_DurationPlusOne,6,(INTEGER)_InputValue) //duration is in seconds (1 turn = 6s)
THEN
PROC_MaxExpectedWeakness(_Type,_Char,_InputValue);

//Input status
PROC
PROC_ExpectedWeakness_Input((STRING)_Type,(CHARACTER)_Char)
AND
DB_WeakValue(_Type,(STRING)_Status,(INTEGER)_InputValue)
AND
HasAppliedStatus(_Char,_Status,1)
THEN
PROC_MaxExpectedWeakness(_Type,_Char,_InputValue);

PROC
PROC_ExpectedWeakness_InputStacks((STRING)_Type,(CHARACTER)_Char)
AND
DB_VulnStacks((STRING)_Type,_InputW)
THEN
PROC_MaxExpectedWeaknessFromDuration(_Type,_Char,_InputW);

//END_REGION

//REGION Subtract static resistances

PROC
PROC_SubtractResistance((STRING)_Type,(CHARACTER)_Char,(INTEGER)_InputValue)
AND
DB_ExpectedResistance(_Type,_Char,(INTEGER)_OldValue)
AND
IntegerSubtract(_OldValue,_InputValue,(INTEGER)_NewValue)
THEN
NOT DB_ExpectedResistance(_Type,_Char,_OldValue);
DB_ExpectedResistance(_Type,_Char,_NewValue);

PROC
PROC_SubtractResistanceWeakness((STRING)_Type,(CHARACTER)_Char)
AND
DB_ExpectedResistance(_Type,_Char,(INTEGER)_OldValue)
AND
DB_ExpectedWeakness(_Type,_Char,(INTEGER)_WeakValue)
AND
IntegerSubtract(_OldValue,_WeakValue,(INTEGER)_NewValue)
THEN
NOT DB_ExpectedResistance(_Type,_Char,_OldValue);
DB_ExpectedResistance(_Type,_Char,_NewValue);

PROC
PROC_SubtractResistance_All((STRING)_Type,(CHARACTER)_Char)
AND
NOT _Type == "All"
AND
GetStatusCurrentLifetime(_Char,"ALL_RESIST_OUTPUT",(REAL)_Duration)
AND
_Duration > 0.0
AND
RealToInteger(_Duration,(INTEGER)_DurationInt)
AND
IntegerSum(_DurationInt,1,(INTEGER)_DurationPlusOne) //account for osi reaction time
AND
IntegerDivide(_DurationPlusOne,6,(INTEGER)_InputValue) //duration is in seconds (1 turn = 6s)
THEN
PROC_SubtractResistance(_Type,_Char,_InputValue);

PROC
PROC_SubtractResistance_Intrinsic((STRING)_Type,(CHARACTER)_Char)
AND
DB_IntrinsicResistance(_Type,(STRING)_Passive,(INTEGER)_InputValue)
AND
HasPassive(_Char,_Passive,1)
THEN
PROC_SubtractResistance(_Type,_Char,_InputValue);

PROC
PROC_SubtractResistance_Ancestry((STRING)_Type,(CHARACTER)_Char)
AND
DB_AncestryResistance(_Type,(STRING)_Passive)
AND
HasPassive(_Char,_Passive,1)
AND
GetLevel(_Char,(INTEGER)_Level)
AND
IntegerSum(_Level,1,(INTEGER)_LevelPlus1)
AND
IntegerDivide(_LevelPlus1,2,(INTEGER)_InputValue)
THEN
PROC_SubtractResistance(_Type,_Char,_InputValue);

//END_REGION

//END_REGION
EXITSECTION

ENDEXITSECTION
