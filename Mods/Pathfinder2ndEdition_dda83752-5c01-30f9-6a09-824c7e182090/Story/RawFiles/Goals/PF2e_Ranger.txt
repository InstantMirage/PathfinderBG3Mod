Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_HuntPrey((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000);

DB_SummonMinion((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000);

DB_FollowUpAttack_Spell("Projectile_HuntedShot");
DB_FollowUpAttack_Creature((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000);

DB_FollowUpOffhand_Spell("Target_TwinFeint");
DB_FollowUpOffhand_Spell("Target_TwinTakedownStrike");
KBSECTION
//REGION Hunt prey uniqueness

//Add to database
IF
StatusApplied((CHARACTER)_Prey, "HUNT_PREY", (CHARACTER)_Hunter, _)
AND
NOT DB_HuntPrey(_Hunter,_Prey)
THEN
PROC_ClearHuntPrey(_Hunter,_Prey);
DB_HuntPrey(_Hunter,_Prey);

//Check for old prey and remove its status & DB entry
PROC
PROC_ClearHuntPrey((CHARACTER)_Hunter, (CHARACTER)_Prey)
AND
DB_HuntPrey(_Hunter,(CHARACTER)_OldPrey)
THEN
ApplyStatus(_OldPrey, "CLEAR_HUNT_PREY", 1.0, 1, _Hunter );
NOT DB_HuntPrey(_Hunter,_OldPrey);

//Remove from DB after losing status
IF
StatusRemoved((CHARACTER)_Prey, "HUNT_PREY", _, _)
AND
NOT HasAppliedStatus(_Prey, "HUNT_PREY", 1)
AND
DB_HuntPrey((CHARACTER)_OldHunter,_Prey)
THEN
NOT DB_HuntPrey(_OldHunter,_Prey);
//END_REGION

//REGION Minion actions

//Add to database
IF
StatusApplied((CHARACTER)_Minion, "MINION_AWAITING", _, _)
AND
CharacterGetOwner(_Minion,(CHARACTER)_Summoner)
AND
NOT DB_SummonMinion(_Summoner,_Minion)
THEN
DB_SummonMinion(_Summoner,_Minion);
ApplyStatus(_Minion,"MINION_INITIATIVE",1.0,1,_Summoner);
ApplyStatus(_Summoner,"MINION_OWNER",1.0,1);

//Consume action
IF
StatusApplied((CHARACTER)_Minion, "MINION_READY", _, _)
AND
CharacterGetOwner(_Minion,(CHARACTER)_Summoner)
AND
NOT HasAppliedStatus(_Minion,"MINION_STUCK",1)
THEN
UseSpell(_Summoner,"Target_CommandMinion",_Minion,_Minion,1);

//Clear from DB after receiving orders
IF
StatusRemoved((CHARACTER)_Minion, "MINION_AWAITING", _, _)
AND
DB_SummonMinion((CHARACTER)_OldSummoner,_Minion)
THEN
NOT DB_SummonMinion(_OldSummoner,_Minion);

//Cannot command if stuck
IF
StatusApplied((CHARACTER)_Summoner, "MINION_OWNER_STUCK", _, _)
AND
DB_SummonMinion(_Summoner,(CHARACTER)_Minion)
THEN
ApplyStatus(_Minion,"MINION_STUCK",1.0,1);

//Remove stuck status when recovering
IF
StatusRemoved((CHARACTER)_Summoner, "MINION_OWNER_STUCK", _, _)
AND
DB_SummonMinion(_Summoner,(CHARACTER)_Minion)
THEN
RemoveStatus(_Minion,"MINION_STUCK");

//END_REGION

//REGION Make multiple attacks on the same target, MAP applies to each

// Standard attacks
IF
UsingSpellOnTarget((CHARACTER)_Char,(GUIDSTRING)_Target,(STRING)_Spell,_,_,_)
AND
DB_FollowUpAttack_Spell(_Spell)
THEN
ApplyStatus(_Char,"FOLLOW_UP_ATTACK",1.0);
DB_FollowUpAttack_Creature(_Char,_Target);

//Using a DB to get better timing
IF
CastedSpell((CHARACTER)_Char,(STRING)_Spell,_,_,_)
AND
DB_FollowUpAttack_Spell(_Spell)
AND
DB_FollowUpAttack_Creature(_Char,(GUIDSTRING)_Target)
THEN
Attack(_Char,_Target,0);
NOT DB_FollowUpAttack_Creature(_Char,_Target);


//Off-hand attacks (requires interrupt)
IF
UsingSpellOnTarget((CHARACTER)_Char,(GUIDSTRING)_Target,(STRING)_Spell,_,_,_)
AND
DB_FollowUpOffhand_Spell(_Spell)
THEN
DB_FollowUpAttack_Creature(_Char,_Target);

//Attack must have finished for reaction to be available
IF
CastedSpell((CHARACTER)_Char,(STRING)_Spell,_,_,_)
AND
DB_FollowUpOffhand_Spell(_Spell)
AND
DB_FollowUpAttack_Creature(_Char,(GUIDSTRING)_Target)
THEN
ApplyStatus(_Target,"FOLLOW_UP_OFFHAND_TARGET",1.0,1,_Char);
NOT DB_FollowUpAttack_Creature(_Char,_Target);

//END_REGION
EXITSECTION

ENDEXITSECTION
