local __util = require 'larian.util'
--Conditions for Baldur's Path

-- Status: Movement (todo: refactor movement statuses to use these)

--Returns if it is currently possible to Stride, if not, movement will be cleared
function AutoStride()
	local canMove = ~Immobilized() | HasStatus('SG_Prone')
	local hasActions = HasActionResource('ActionPoint', 1 , 0, false, false) or HasStatus('HASTE_ATTACK')
	local automaticStride = ~HasStatus('MANUAL_STRIDE')
	
	return canMove & hasActions & automaticStride
end

-- Can~Step into Difficult Terrain
function DifficultTerrainStatusID()
	return StatusId('DIFFICULT_TERRAIN') | StatusId('DIFFICULT_TERRAIN_DEEPWATER') | StatusId('DIFFICULT_TERRAIN_MUD') | StatusId('DIFFICULT_TERRAIN_VINES') | StatusId('DIFFICULT_TERRAIN_OVERGROWTH') | StatusId('DIFFICULT_TERRAIN_WEB') | StatusId('MAG_RAMPART_AURA_DIFFICULT_TERRAIN') | StatusId('DIFFICULT_TERRAIN_LAVA')
end

function HasDifficultTerrainStatus()
	return HasStatus('DIFFICULT_TERRAIN') | HasStatus('DIFFICULT_TERRAIN_DEEPWATER') | HasStatus('DIFFICULT_TERRAIN_MUD') | HasStatus('DIFFICULT_TERRAIN_VINES') | HasStatus('DIFFICULT_TERRAIN_OVERGROWTH') | HasStatus('DIFFICULT_TERRAIN_WEB') | HasStatus('MAG_RAMPART_AURA_DIFFICULT_TERRAIN') | HasStatus('DIFFICULT_TERRAIN_LAVA')
end

function HasDashStatus(entity)
    entity = entity or context.Source
	return HasStatus('DASH', entity ) | HasStatus('DASH_STACKED', entity ) | HasStatus('DASH_STACKED_2', entity )
end

function StrideCostSpellCheck()
	return SpellCategoryIs(SpellCategory.Dash) | HasUseCosts('Movement',true) | (HasUseCosts('Stride',true) & ~SpellTypeIs(SpellType.Rush))
end

function HasteSpellCheck()
	return ( ExtraAttackSpellCheck() | SpellCategoryIs(SpellCategory.Dash) | HasUseCosts('Movement',false) | HasUseCosts('Stride',false) ) & HasUseCosts('ActionPoint',true)
end

--Chance of a crit on an opportunity attack
function OpportunityAttackCritRoll(source,source_pos,observer,observer_pos)
	
	local attacktype = AttackType.MeleeUnarmedAttack
	
	if WieldingWeapon('Melee', false, true, context.Observer).Result and not HasStatus('DISARMED',OBSERVER_OBSERVER).Result then
		attacktype = AttackType.MeleeWeaponAttack
	end
	
	local attack = Attack(attacktype,false,false,source,source_pos,observer,observer_pos)

	--Crit chance can be more than success-50%, with Advantage or an exceedingly high bonus.
	local crit_chance = attack.Chance - 0.5
	local crit_flat_dc = math.floor( 21 - crit_chance*20 )
	
    return ConditionResult(true,{},{},1.0) --RollDieAgainstDC(DiceType.d20,crit_flat_dc)
end

function OpportunityAttackNonCritRoll()
	--Used in a SpellRoll, so the attack field can be simpler.
	local attacktype = AttackType.MeleeUnarmedAttack
	
	if WieldingWeapon('Melee', false, true, context.Source) and not HasStatus('DISARMED').Result then
		attacktype = AttackType.MeleeWeaponAttack
	end
	
	local attack = Attack(AttackType.MeleeWeaponAttack)
	
	--Note: Crit chance can be more than success-50%, with Advantage or an exceedingly high bonus.
	local crit_chance = math.max(attack.Chance - 0.5, 0.05)
	local success_chance = attack.Chance - crit_chance
	local fail_chance = 1 - attack.Chance
	local non_crit_percentile_dc = math.floor( 100*fail_chance/(success_chance + fail_chance) + 1 )
	
	local roll = RollDieAgainstDC(DiceType.d100,non_crit_percentile_dc)
	local roll_chance = success_chance/(success_chance + fail_chance)
	
	return ConditionResult(roll.Result,{},{},roll_chance)
end


function OpportunityAttackCheck()
	local isMove = SpellCategoryIs(SpellCategory.Dash) | SpellCategoryIs(SpellCategory.Jump) | SpellTypeIs(SpellType.Rush)
	local canHitMove = (~Player(context.Source) & Tagged('AI_IGNORED_TARGET') & ~HasStatus('GNOLL_SUDDENRUSH')) & ~HasStatus('SHOCKWAVE') & ~(HasStatus('MOBILE_NO_AOO', context.Source) & HasStatus('MOBILE_NO_AOO_SOURCE', context.Target)) & ~HasStatus('FLAMING_SPHERE_AURA') & ~HasStatus('SNEAKING',context.Target) & ~HasStatus('SG_Ignore_AOO',context.Target)
	
	return (~HasStatus('SANCTUARY',context.Source) & ~HasSpellFlag(SpellFlags.IgnoreAoO, context.Target)) & ( IsSpell() | (isMove & canHitMove) | IsRangedAttack() | HasSpellFlag(SpellFlags.HasSomaticComponent, context.Target) )
end

--Deprecated movement functions

function IsAnyActionStatusEvent()
	return IsStatusEvent(StatusEvent.OnAttack) | IsStatusEvent(StatusEvent.OnSpellCast)
end

function HasMindSanctuary(entity)
    entity = entity or context.Source
	return HasStatus('MF_MIND_SANCTUARY', entity) | HasStatus('TAD_MIND_SANCTUARY', entity) | HasPassive('TAD_MindSanctuary', entity)
end

function DashClearsMove(entity)
    entity = entity or context.Source
	return ~HasActionResource('Movement', 1 , 0, false, false, entity) | (~HasMindSanctuary(entity) & ~HasDashStatus(entity) & ~HasStatus('AUTO_STRIDE_MOVE',entity))
end

--Helps the AI remember it has movement
function DontClearAIMove()
	return ~Player() & HasActionResource('Movement', 100 , 0, true, false)
end

--Level scaling
function TrainedWeapon() --Proficient
	return IsProficientWith(context.Source, GetAttackWeapon(context.Source))
end

function TrainedArmor() --Proficient or unarmored
	if ~WearingArmor(context.Source) then
		return ConditionResult(true)
	end

	--Armor test from Community Library
	local armor = GetActiveArmor(context.Source)
	
    local hasLightArmor = armor.ArmorType == ArmorType.Padded 
    | armor.ArmorType == ArmorType.Leather 
    | armor.ArmorType == ArmorType.StuddedLeather
	
	local hasMediumArmor = armor.ArmorType == ArmorType.Hide 
    | armor.ArmorType == ArmorType.ChainShirt 
    | armor.ArmorType == ArmorType.ScaleMail 
    | armor.ArmorType == ArmorType.BreastPlate
    | armor.ArmorType == ArmorType.HalfPlate 

	return HasProficiency('HeavyArmor',context.Source) or (HasProficiency('LightArmor',context.Source) & hasLightArmor) or (HasProficiency('MediumArmor',context.Source) & hasMediumArmor)
end

function TrainedSkill() --Proficient
	return HasProficiencyBonus(context.CheckedAbility,context.CheckedSkill,context.Source)
end

-- Off-guard

function OffGuard(target,source)
    target = target or context.Target
    source = source or context.Source
	
	local feint = IsMeleeAttack() & (HasStatus('FEINT_ROUND',target,source) | HasStatus('FEINT_ONCE',target,source))
	local hidden = HasStatus('SG_Invisible',source) | HasStatus('SNEAKING',source)
	--You aren't off-guard to hidden, undetected, or flanking creatures of your level or lower
	local denyadvantage = Tagged('ROGUE_DENYADVANTAGE',target) & (target.Level >= source.Level)
	
	--Class-specific off-guard conditions
	local surpriseattack = HasPassive('SneakAttackPassive',source) & HasStatus('SURPRISED',target)
	local dreadstriker = Tagged('ROGUE_DREADSTRIKER',source) & HasStatus('SG_Frightened',target)
	local naturesedge = HasPassive('NaturesEdge',source) & HasStatus('SG_DifficultTerrain',target)
	
	local result = Tagged('OFF_GUARD',target) | feint | (hidden & ~denyadvantage) | surpriseattack | dreadstriker | naturesedge
	
	return ConditionResult( result.Result , {ConditionError("OffGuard")})
end

function Flanking(exclusionStatus, distance, tag, hasShield, target, source)
	distance = distance or 1.5
    target = target or context.Target
    source = source or context.Source

    local errorTrue = {ConditionError("HasAllyWithinRange", {ConditionErrorData.MakeFromNumber(distance, EErrorDataType.Distance)})}
    local errorFalse = {ConditionError("HasNotAllyWithinRange", {ConditionErrorData.MakeFromNumber(distance, EErrorDataType.Distance)})}

    local allies = GetAlliesWithinRange(distance, target, source)
    if allies ~= nil then
        for _, entity in ipairs(allies.Allies) do
			
            -- ensure entity does not have the excluded status
            local noExcludedStatus = ConditionResult(exclusionStatus == nil)
            if exclusionStatus then
                noExcludedStatus = ~HasStatus(exclusionStatus, entity)
            end

            -- filter by tag if provided
            local hasTag = ConditionResult(tag == nil)
            if tag then
                hasTag = Tagged(tag, entity)
            end

            -- filter by having a shield if requested
            local shieldEquipped = ConditionResult(not hasShield)
            if hasShield then
                shieldEquipped = HasShieldEquipped(entity)
            end

			-- need to be looking at an ally, and that ally must be looking at you and the enemy
			local flankingAngles = ConditionResult(false)
			if FacingMe(entity,source).Result then
				flankingAngles = ConditionResult(true)
			end

            if noExcludedStatus.Result and hasTag.Result and shieldEquipped.Result and flankingAngles.Result then
                return ConditionResult(true, errorFalse, errorTrue)
            end
        end
    end

    return ConditionResult(false, errorFalse, errorTrue)
end

-- Status MAP_X_ATTACKS

--~functional for Stats.
function CalculateMAP()
	local MAP = -5
	if AgileMAP() then
		MAP = -4
	end
	return MAP
end

function AgileMAP()
	return HasWeaponProperty(WeaponProperties.Light, context.AttackWeapon) or IsMeleeUnarmedAttack()
end

-- Interrupt CritThreshold

function CritThresholdSuccess()
    local notCrit = context.InterruptedRoll.NaturalRoll < 20 & context.InterruptedRoll.NaturalRoll > 1
	local critDC = context.InterruptedRoll.Difficulty + 10
    local exceededBy10 = context.InterruptedRoll.Total >= critDC

    return ConditionResult(notCrit & exceededBy10)
end

function CritThresholdFail()
    local notCrit = context.InterruptedRoll.NaturalRoll < 20 & context.InterruptedRoll.NaturalRoll > 1
	local critTotal = context.InterruptedRoll.Total + 10
    local failedBy10 = critTotal <= context.InterruptedRoll.Difficulty

    return ConditionResult(notCrit & failedBy10)
end

-- Weapons

function WeaponDieSizeNum(num)
    --local weaponEntity = GetActiveWeapon(entity, true)
	--if IsWeaponOfProficiencyGroup('Clubs|Quarterstaffs',weaponEntity) then
	--end
	--GetModifier(context.Source.WeaponAttackRollAbility)
	--DealDamage(MainMeleeWeapon, MainMeleeWeaponDamageType)
    return ConditionResult(true)
end

--Barbarian

function RageSpell()
	return SpellId('Shout_Rage') | SpellId('Shout_AnimalRage') | SpellId('Shout_FuryRage') | SpellId('Shout_BludgeoningDragonRage') | SpellId('Shout_PoisonDragonRage') | SpellId('Shout_FireDragonRage') | SpellId('Shout_ForceDragonRage') | SpellId('Shout_PsychicDragonRage') | SpellId('Shout_GiantRage') | SpellId('Shout_Rage_Frenzy') | SpellId('Shout_Rage_Totem_Bear') | SpellId('Shout_Rage_Boar')
end

--Bard

function HasMartialExtendableComposition(source)
	source = source or context.Source
	return HasStatus('CourageousAnthem',source) | HasStatus('SongOfStrengthStatus',source) | HasStatus('RallyingAnthemDR',source)
end

function MartialLingeringComposition(source)
	source = source or context.Source
	return HasStatus('COURAGE_LINGER_AURA',source) | HasStatus('CourageForteAura2',source) | HasStatus('CourageForteAura3',source) | HasStatus('SongOfStrengthLingering',source) | HasStatus('StrengthForteAura2',source) | HasStatus('StrengthForteAura3',source) | HasStatus('RallyingLingering',source) | HasStatus('RallyingForteAura2',source) | HasStatus('RallyingForteAura3',source)
end

function EndMartialLingeringComposition()
	return StatusId('COURAGE_LINGER_AURA') | StatusId('CourageForteAura2') | StatusId('CourageForteAura3') | StatusId('SongOfStrengthLingering') | StatusId('StrengthForteAura2') | StatusId('StrengthForteAura3') | StatusId('RallyingLingering') | StatusId('RallyingForteAura2') | StatusId('RallyingForteAura3')
end

function AdjacentToBeastMinion()
    local distance = 2
    local target = context.Target
    local source = context.Source

    local errorTrue = {ConditionError("HasAllyWithinRange", {ConditionErrorData.MakeFromNumber(distance, EErrorDataType.Distance)})}
    local errorFalse = {ConditionError("HasNotAllyWithinRange", {ConditionErrorData.MakeFromNumber(distance, EErrorDataType.Distance)})}

    local allies = GetAlliesWithinRange(distance, target, source)
    if allies ~= nil then
        for _, entity in ipairs(allies.Allies) do

			-- must be a beast summoned by the caster
            local isSummon = (GetSummoner(entity) == source)
            local hasTag = Tagged('BEAST', entity)

            if isSummon and hasTag.Result then
                return ConditionResult(true, errorFalse, errorTrue)
            end
        end
    end

    return ConditionResult(false, errorFalse, errorTrue)
end

--Champion

function RetributiveStrikeRange(observer,source)
	observer = observer or context.Observer
	source = source or context.Source
	
	local reach_nimble = WieldingWeapon('Reach', false, false, observer) & ~DistanceToGreaterThan(observer, source, 4.5)
	local ranged = WieldingWeapon('Ammunition', false, false, observer)
	local melee_nimble = ~WieldingWeapon('Ammunition', false, false, observer) & ~DistanceToGreaterThan(observer, source, 3)
	local nimble_reprisal = (ranged|reach_nimble|melee_nimble) & HasPassive('NimbleReprisal',observer)
	
	local reach = WieldingWeapon('Reach', false, false, observer) & ~DistanceToGreaterThan(observer, source, 3)	
	local melee = ~WieldingWeapon('Ammunition', false, false, observer) & ~DistanceToGreaterThan(observer, source, 1.5)

	return nimble_reprisal | reach | melee
end

--Fighter

function ClassDC(source)
	source = source or context.Source
	local base = 10 + source.ProficiencyBonus + math.max(GetModifier(source.Strength), GetModifier(source.Dexterity))
	local expertise = 0
	local stat_pen = 0
	
	if HasPassive('ClassDCExpert',source).Result then
		expertise = 2
	end
	
	if Tagged('STAT_PEN_2DC',source).Result then
		stat_pen = 2
	elseif Tagged('STAT_PEN_1DC',source).Result then
		stat_pen = 1
	end
	
	return base + expertise - stat_pen
end

function ArmorCheck(value)
	if ~context.Source then return ConditionResult(false) end
	return ConditionResult(context.Source.Strength < value) & ~HasSpellFlag(SpellFlags.Attack)
end

function ArmorSpeed(value)
	if ~context.Source then return ConditionResult(false) end
	return ~(ConditionResult(context.Source.Strength >= value) | HasPassive('UnburdenedIron',context.Source))
end

function HeavyArmorSpeed(value)
	if ~context.Source then return ConditionResult(false) end
	return ~(ConditionResult(context.Source.Strength >= value) & HasPassive('UnburdenedIron',context.Source)) & ~ArmorMovementPenalty(value)
end

function ExactingStrikeFX()
    return (SpellId('Target_ExactingStrike') | SpellId('Projectile_ExactingStrike')) & HasStatus('MAP_2_ATTACKS',SELF)
end

function Press()
	return HasStatus('MAP_PENALTY_2ND') | HasStatus('MAP_PENALTY_3RD')
end

--Monk

-- Can be part of Flurry of Blows
function IsMonkUnarmedSpell()
	return MonkUnarmedStrike() | MonasticWeaponry() | MonasticArcher() | FlurryOfManeuvers()
end

function MonkUnarmedStrike()
	return SpellId('Target_UnarmedAttack') | SpellId('Target_IronFist') | SpellId('Target_CraneWing') | SpellId('Target_TigerClaw') | SpellId('Target_CobraFang') | SpellId('Target_FallingStone') | SpellId('Target_DragonStance') | SpellId('Target_WolfJaw')
end

function MonasticWeaponry()
	local source = context.Source
	-- agile/finesse/simple
	local mainhand = SpellId('Target_MainHandAttack') & (WieldingWeapon('Finesse', false, false, source) | WieldingWeapon('Light', false, false, source) | IsWeaponOfProficiencyGroup('SimpleWeapons', GetActiveWeapon(source,true)) )
	local offhand = SpellId('Target_OffHandAttack') & (WieldingWeapon('Finesse', true, false, source) | WieldingWeapon('Light', true, false, source) | IsWeaponOfProficiencyGroup('SimpleWeapons', GetActiveWeapon(source,false)) )
	
	return ~WieldingWeapon('Twohanded', false, false, source) & HasPassive('MonasticWeaponry',source) & ( mainhand | offhand )
end

function MonasticArcher()
	return ~WieldingWeapon('Loading', false, false, context.Source) & HasStatus('MonasticArcherStatus',context.Source) & SpellId('Projectile_MainHandAttack')
end

function FlurryOfManeuvers()
	return HasPassive('FlurryOfManuevers',context.Source) & (SpellId('Target_Shove_Linked') | SpellId('Target_Grapple') | SpellId('Target_Trip') | SpellId('Target_SkillActions'))
end

function NonUnarmedStrikeCheck()
	return HasStringInSpellRoll('WeaponAttack') | HasStringInSpellRoll('RangedUnarmedAttack') | HasStringInSpellRoll('ThrowAttack')
end

function NonBowStrikeCheck()
	return HasStringInSpellRoll('Melee') | HasStringInSpellRoll('UnarmedAttack') | HasStringInSpellRoll('ThrowAttack') 
end

function StanceSpell()
	return SpellId('Shout_CraneStance') | SpellId('Shout_DragonStance') | SpellId('Shout_MountainStance') | SpellId('Shout_TigerStance') | SpellId('Shout_WolfStance') | SpellId('Shout_MonasticArcherStance') | SpellId('Shout_CobraStance') | SpellId('Shout_ClingingShadowsStance') | SpellId('Shout_IronbloodStance') | SpellId('Shout_TangledForestStance') | SpellId('Shout_WildWindsStance') | SpellId('Shout_PointBlankStance') | SpellId('Shout_RicochetStance') | SpellId('Shout_DuelingStance') | SpellId('Shout_ParagonsGuardStance')
end

function QiSpellsInitiate()
	return (HasPassive('InnerUpheaval',context.Source) | HasPassive('QiRush',context.Source))
end

--Ranger

function HuntedPrey(target,source)
	source = source or context.Source
	target = target or context.Target
	return ConditionResult( HasStatus('HUNT_PREY',target,source).Result, {ConditionError("HuntedPrey")})
end

function HuntedPrey_WardensBoon(passive,target,source)
	source = source or context.Source
	target = target or context.Target
	-- Exclude Warden's Boon from taking effect if you're already benefitting from that hunter's edge
	return HasStatus('WARDENS_BOON_PREY',target,source) & ~( HasPassive(passive,source) & HuntedPrey(target,source))
end

function CanCommandMinion(entity)
	entity = entity or context.Source
	-- Must be able to take actions.
	local hasActions = HasActionResource('ActionPoint', 1 , 0, false, false)
	-- Must be able to speak or use telepathy (as a mind flayer).
	local canConcentrate = Tagged('MINDFLAYER',entity) | HasPassive('TAD_PartialCeremorph',entity) | ~( HasVerbalComponentBlocked() | HasSpellCastBlocked() )
	-- Cannot be incapacitated.
	local blockedStatusGroups = HasStatus('SG_Incapacitated',entity) | HasStatus('SG_Prone',entity) | HasStatus('SG_Stunned',entity) | HasStatus('SG_Dominated',entity) | HasStatus('SG_Paralyzed',entity) |  HasStatus('SG_Unconscious',entity)
	local blockedStatuses = HasStatus('STINKING_CLOUD',entity) | HasStatus('INCAPACITATED_DND',entity) | HasStatus('COMMAND_APPROACH') | HasStatus('COMMAND_FLEE',entity) | HasStatus('CROWNOFKARSUS_UNCONCIOUS',entity) | HasStatus('LURING_SONG',entity) | HasStatus('IRRESISTIBLE_DANCE') | HasStatus('LOW_OSKARSBELOVED_UNNERVED',entity) | HasStatus('MIND_MASTERY',entity) | HasStatus('END_KARSUSCOMPULSION_CHANNEL',entity)
	
	return hasActions & canConcentrate & ~Dead(entity) & ~blockedStatusGroups & ~blockedStatuses
end

function PrecisionEdge()
	return IsAttack() & HuntedPrey() & CanPrecisionDamage() & ~HasStatus('PrecisionEdgeRound',context.Source)
end

function PrecisionEdge_WardensBoon()
	return IsAttack() & HuntedPrey_WardensBoon('HuntPreyPrecisionUnlock') & CanPrecisionDamage() & ~HasStatus('PrecisionEdgeRound',context.Source)
end

function OutwitEdgeDefense(target,source)
	source = source or context.Source
	target = target or context.Target
	return ( HasPassive('HuntPreyOutwitUnlock',target) & HuntedPrey(source,target) )|( HasStatus('WARDENS_BOON_OUTWIT',target) & HuntedPrey_WardensBoon('HuntPreyOutwitUnlock',source,target) )
end

function YoungAnimal()
	source = context.Source
	return ~(HasPassive('MatureAnimalCompanion',source) | HasPassive('LoyalWarhorse',source))
end

function MatureAnimal()
	source = context.Source
	return (HasPassive('MatureAnimalCompanion',source) | HasPassive('LoyalWarhorse',source)) & ~(HasPassive('IncredibleCompanion',source) | HasPassive('LoyalWarhorse',source))
end

function IncredibleAnimal()
	source = context.Source
	return (HasPassive('MatureAnimalCompanion',source) | HasPassive('LoyalWarhorse',source)) & (HasPassive('IncredibleCompanion',source) | HasPassive('ImposingDestrier',source))
end

function YourAnimalCompanion()
	local result = HasPassive('HuntersMark_RangerCompanion',context.Target) & SummonOwner()
	return ConditionResult(result.Result,{ConditionError("RangerCompanion")})
end

function WardenSpellsInitiate()
	return (HasPassive('GravityWeapon',context.Source) | HasPassive('HealCompanion',context.Source) | HasPassive('MagicHide',context.Source))
end

function WardenSpellsAdvanced()
	return (HasPassive('AnimalFeature',context.Source) | HasPassive('EnlargeCompanion',context.Source) | HasPassive('SoothingMist',context.Source))
end

--Rogue

function CanPrecisionDamage(target)
    target = target or context.Target
	local result = ~(Tagged('OOZE',target)|Tagged('SHADOW',target)|Tagged('GHOST',target)|Tagged('DISPLACER_BEAST',target)|Tagged('SCRYING_EYE',target)|Tagged('GASEOUS_FORM',target)|HasPassive('Ethereal',target))
	
	return ConditionResult( result.Result,{ConditionError("PrecisionImmune")})
end

function SneakAttackWeapon(entity, weapon)
	entity = entity or context.Source
	weapon = context.AttackWeapon
	
	-- Agile, finesse, or ranged
	local standard_weapon = HasWeaponProperty(WeaponProperties.Light, weapon) | HasWeaponProperty(WeaponProperties.Finesse, weapon) | HasWeaponProperty(WeaponProperties.Ammunition, weapon)
	
	local thrown_weapon = IsUnarmedAttack() & SpellTypeIs(SpellType.Throw) & ( HasWeaponProperty(WeaponProperties.Light, context.HitDescription.ThrownObject) |HasWeaponProperty(WeaponProperties.Finesse, context.HitDescription.ThrownObject) )
	
	-- maximum: d8 simple, d6 martial (one-handed versatiles)
	local is_ruffian = HasPassive('Ruffian',entity)
	local onehand_check = WieldingWeapon('Melee', true, false, entity) | HasShieldEquipped(entity)
	local ruffian_weapon = IsWeaponOfProficiencyGroup('SimpleWeapons', weapon) | IsWeaponOfProficiencyGroup('Morningstars', weapon) | ( onehand_check & IsWeaponOfProficiencyGroup('Tridents', weapon) )
	
	return IsMeleeUnarmedAttack() | standard_weapon | thrown_weapon | (is_ruffian & ruffian_weapon)
end

function WieldingSneakAttackWeapon(entity)
    entity = entity or context.Target
    local weaponEntity = GetActiveWeapon(entity, true)
	
	-- Agile or finesse
	local standard_weapon = WieldingWeapon('Finesse', false, true, entity) | WieldingWeapon('Light', false, true, entity)
	
	-- maximum: d8 simple, d6 martial (one-handed versatiles)
	local is_ruffian = HasPassive('Ruffian',entity)
	local onehand_check = WieldingWeapon('Melee', true, false, entity) | HasShieldEquipped(entity)
	local ruffian_weapon = IsWeaponOfProficiencyGroup('SimpleWeapons', weaponEntity) | IsWeaponOfProficiencyGroup('Morningstars', weaponEntity) | ( onehand_check & IsWeaponOfProficiencyGroup('Tridents', weaponEntity) )
	
	return standard_weapon | (is_ruffian & ruffian_weapon)
end

-- Witch

function OngoingMisery()
	return HasAnyStatus({'OFF_BALANCED','Grappled','FEINT_ROUND','POISONED','BLINDED','CLUMSY','CLUMSY2','STUNNED1','STUNNED2','Stupefied1','Stupefied2','ENFEEBLED'}, {}, {},context.Target)
end

function OwnerCanSustain(status)
    local source = context.Source
    return ConditionResult(GetStatusDuration(status, source) < 2,{ConditionError("SustainCooldown")})
end

--Incap - treats DC as 10 higher

function IncapDC(dc,target,source)
    target = target or context.Target
    source = source or context.Source
	dc = dc or SourceSpellDC(10,source)
	
	if target.Level > source.Level then
		dc = dc - 10
	end
	return dc
end

function IncapSpellSlotDC(dc,target,source)
    target = target or context.Target
    source = source or context.Source
	dc = dc or SourceSpellDC(10,source)
	
	if target.Level > 2*context.HitDescription.SpellPowerLevel then
		dc = dc - 10
	end
	return dc
end

function IncapClassDC(target,source)
    target = target or context.Target
    source = source or context.Source
	return IncapDC(ClassDC(source),target,source)
end